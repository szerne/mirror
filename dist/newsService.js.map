{"version":3,"sources":["newsService.js"],"names":["ARTICLES_URL","SOURCES_URL","defaultSrc","newsService","carouselIntervalId","refreshIntervalId","category","source","articles","allSources","page","sourcesPerPage","getArticles","onSuccess","xhr","XMLHttpRequest","url","NEWS_API_KEY","open","onreadystatechange","readyState","DONE","status","res","JSON","parse","responseText","send","getSources","getNPageSources","sources","n","slice","getNextPageSources","length","getArticleEveryNSeconds","seconds","callback","articleIndex","setInterval","subscribe","refreshMinutes","guessSourceIdByName","name","find","s","toLowerCase","id","changeSource","onChange","Array","isArray","unsubscribe","window","clearInterval"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,eAAe,2BAArB;AACA,IAAMC,cAAc,0BAApB;AACA,IAAMC,aAAa,KAAnB;;AAEO,IAAMC,oCAAe,YAAM;AAC9B,QAAIC,2BAAJ;AACA,QAAIC,0BAAJ;AACA,QAAIC,WAAW,EAAf;AACA,QAAIC,SAASL,UAAb;AACA,QAAIM,WAAW,EAAf;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,OAAO,CAAX;AACA,QAAIC,iBAAiB,EAArB;;AAEA,QAAMC,cAAc,SAAdA,WAAc,CAACC,SAAD,EAAe;AAC/B,YAAIC,MAAM,IAAIC,cAAJ,EAAV;AACA,YAAIC,MAAShB,YAAT,gBAAgCO,MAAhC,gBAAiD,qBAAUU,YAA/D;AACAH,YAAII,IAAJ,CAAS,KAAT,EAAgBF,GAAhB,EAAqB,IAArB;AACAF,YAAIK,kBAAJ,GAAyB,YAAM;AAC3B,gBAAGL,IAAIM,UAAJ,KAAmBL,eAAeM,IAAlC,IAA0CP,IAAIQ,MAAJ,KAAe,GAA5D,EAAiE;AAC7D,oBAAIC,MAAMC,KAAKC,KAAL,CAAWX,IAAIY,YAAf,CAAV;AACAlB,2BAAWe,IAAIf,QAAf;AACA,oBAAIK,SAAJ,EAAeA,UAAUL,QAAV;AAClB;AACJ,SAND;AAOAM,YAAIa,IAAJ;AACH,KAZD;;AAcA,QAAMC,aAAa,SAAbA,UAAa,CAACf,SAAD,EAAe;AAC9B,YAAIV,YAAYM,UAAhB,EAA4B,OAAOI,UAAUgB,gBAAgB,CAAhB,CAAV,CAAP;;AAE5B,YAAIf,MAAM,IAAIC,cAAJ,EAAV;AACA,YAAIC,MAASf,WAAT,kBAAiCE,YAAYG,QAA7C,4BAAJ;AACAQ,YAAII,IAAJ,CAAS,KAAT,EAAgBF,GAAhB,EAAqB,IAArB;AACAF,YAAIK,kBAAJ,GAAyB,YAAM;AAC3B,gBAAGL,IAAIM,UAAJ,KAAmBL,eAAeM,IAAlC,IAA0CP,IAAIQ,MAAJ,KAAe,GAA5D,EAAiE;AAC7D,oBAAIC,MAAMC,KAAKC,KAAL,CAAWX,IAAIY,YAAf,CAAV;AACAvB,4BAAYM,UAAZ,GAAyBc,IAAIO,OAA7B;AACAjB,0BAAUgB,gBAAgB,CAAhB,CAAV;AACH;AACJ,SAND;AAOAf,YAAIa,IAAJ;AACH,KAdD;;AAgBA,QAAME,kBAAkB,SAAlBA,eAAkB,CAACE,CAAD,EAAO;AAC3B,eAAO5B,YAAYM,UAAZ,CAAuBuB,KAAvB,CAA6BD,IAAIpB,cAAjC,EAAiD,CAACoB,IAAI,CAAL,IAAUpB,cAA3D,CAAP;AACH,KAFD;;AAIA,QAAMsB,qBAAqB,SAArBA,kBAAqB,GAAM;AAC7B,YAAI,CAAC9B,YAAYM,UAAjB,EAA6B;AAC7BC,eAAOC,kBAAkBD,OAAO,CAAzB,KAA+BP,YAAYM,UAAZ,CAAuByB,MAAtD,GAA+DxB,OAAO,CAAtE,GAA0E,CAAjF;AACA,eAAOmB,gBAAgBnB,IAAhB,CAAP;AACH,KAJD;;AAMA,QAAMyB,0BAA0B,SAA1BA,uBAA0B,CAACC,OAAD,EAAUC,QAAV,EAAuB;AACnD,YAAIC,eAAe,CAAnB;AACAD,iBAAS7B,SAAS8B,YAAT,CAAT;AACAA,uBAAeA,eAAe9B,SAAS0B,MAAxB,GAAiCI,eAAe,CAAhD,GAAoD,CAAnE;AACAlC,6BAAqBmC,YAAY,YAAM;AACnCF,qBAAS7B,SAAS8B,YAAT,CAAT;AACAA,2BAAe,CAAC,CAAC9B,SAAS8B,eAAe,CAAxB,CAAF,GAA+BA,eAAe,CAA9C,GAAkD,CAAjE;AACH,SAHoB,EAGlBF,UAAU,IAHQ,CAArB;AAIH,KARD;;AAUA,QAAMI,YAAY,SAAZA,SAAY,CAACJ,OAAD,EAAUK,cAAV,EAA0BJ,QAA1B,EAAuC;AACrDlC,oBAAYS,WAAZ,CAAwB,YAAM;AAC1BuB,oCAAwBC,OAAxB,EAAiCC,QAAjC;AACH,SAFD;;AAIAhC,4BAAoBkC,YAAY3B,WAAZ,EAAyB6B,iBAAiB,KAA1C,CAApB;AACH,KAND;;AAQA,QAAMC,sBAAsB,SAAtBA,mBAAsB,CAACC,IAAD,EAAU;AAClC,YAAIpC,SAASJ,YAAYM,UAAZ,CAAuBmC,IAAvB,CAA4B,UAACC,CAAD,EAAO;AAC5C,mBAAOA,EAAEF,IAAF,CAAOG,WAAP,OAAyBH,KAAKG,WAAL,EAAhC;AACH,SAFY,CAAb;;AAIA,YAAIvC,MAAJ,EAAY,OAAOA,OAAOwC,EAAd;AACf,KAND;;AAQA,QAAMC,eAAe,SAAfA,YAAe,CAACL,IAAD,EAAOM,QAAP,EAAoB;AACrC,YAAI,CAACC,MAAMC,OAAN,CAAchD,YAAYM,UAA1B,CAAD,IAA0C,CAACN,YAAYM,UAAZ,CAAuByB,MAAtE,EAA8E;AAC1E/B,wBAAYyB,UAAZ,CAAuB,YAAM;AACzBrB,yBAASmC,oBAAoBC,IAApB,KAA6BpC,MAAtC;AACA0C,yBAAS1C,MAAT;AACH,aAHD;AAIH,SALD,MAKO;AACHA,qBAASmC,oBAAoBC,IAApB,KAA6BpC,MAAtC;AACA0C,qBAAS1C,MAAT;AACH;AACJ,KAVD;;AAYA,QAAM6C,cAAc,SAAdA,WAAc,GAAM;AACtBC,eAAOC,aAAP,CAAqBlD,kBAArB;AACAiD,eAAOC,aAAP,CAAqBjD,iBAArB;AACH,KAHD;;AAKA,WAAO;AACHI,8BADG;AAEHH,0BAFG;AAGH0C,kCAHG;AAIHpC,gCAJG;AAKHuB,wDALG;AAMHP,8BANG;AAOHK,8CAPG;AAQHO,4BARG;AASHY;AATG,KAAP;AAYH,CAzG0B,EAApB","file":"newsService.js","sourcesContent":["import { CONSTANTS } from 'constants';\n\nconst ARTICLES_URL = '//newsapi.org/v1/articles';\nconst SOURCES_URL = '//newsapi.org/v1/sources';\nconst defaultSrc = 'cnn';\n\nexport const newsService = (() => {\n    let carouselIntervalId;\n    let refreshIntervalId;\n    let category = '';\n    let source = defaultSrc;\n    let articles = [];\n    let allSources = null;\n    let page = 0;\n    let sourcesPerPage = 12;\n\n    const getArticles = (onSuccess) => {\n        let xhr = new XMLHttpRequest();\n        let url = `${ARTICLES_URL}?source=${source}&apiKey=${CONSTANTS.NEWS_API_KEY}`;\n        xhr.open('GET', url, true);\n        xhr.onreadystatechange = () => {\n            if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n                let res = JSON.parse(xhr.responseText);\n                articles = res.articles;\n                if (onSuccess) onSuccess(articles);\n            }\n        };\n        xhr.send();\n    }\n\n    const getSources = (onSuccess) => {\n        if (newsService.allSources) return onSuccess(getNPageSources(0));\n\n        let xhr = new XMLHttpRequest();\n        let url = `${SOURCES_URL}?category=${newsService.category}&country=us&language=en`;\n        xhr.open('GET', url, true);\n        xhr.onreadystatechange = () => {\n            if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n                let res = JSON.parse(xhr.responseText);\n                newsService.allSources = res.sources;\n                onSuccess(getNPageSources(0));\n            }\n        };\n        xhr.send();\n    }\n\n    const getNPageSources = (n) => {\n        return newsService.allSources.slice(n * sourcesPerPage, (n + 1) * sourcesPerPage);\n    }\n\n    const getNextPageSources = () => {\n        if (!newsService.allSources) return;\n        page = sourcesPerPage * (page + 1) <= newsService.allSources.length ? page + 1 : 0;\n        return getNPageSources(page);\n    }\n\n    const getArticleEveryNSeconds = (seconds, callback) => {\n        let articleIndex = 0;\n        callback(articles[articleIndex]);\n        articleIndex = articleIndex < articles.length ? articleIndex + 1 : 0;\n        carouselIntervalId = setInterval(() => {\n            callback(articles[articleIndex]);\n            articleIndex = !!articles[articleIndex + 1] ? articleIndex + 1 : 0;\n        }, seconds * 1000);\n    }\n\n    const subscribe = (seconds, refreshMinutes, callback) => {\n        newsService.getArticles(() => {\n            getArticleEveryNSeconds(seconds, callback);\n        });\n\n        refreshIntervalId = setInterval(getArticles, refreshMinutes * 60000);\n    }\n\n    const guessSourceIdByName = (name) => {\n        let source = newsService.allSources.find((s) => {\n            return s.name.toLowerCase() === name.toLowerCase();\n        });\n\n        if (source) return source.id;\n    }\n\n    const changeSource = (name, onChange) => {\n        if (!Array.isArray(newsService.allSources) || !newsService.allSources.length) {\n            newsService.getSources(() => {\n                source = guessSourceIdByName(name) || source;\n                onChange(source)\n            })\n        } else {\n            source = guessSourceIdByName(name) || source;\n            onChange(source);\n        }\n    }\n\n    const unsubscribe = () => {\n        window.clearInterval(carouselIntervalId);\n        window.clearInterval(refreshIntervalId);\n    }\n\n    return { \n        allSources, \n        category, \n        changeSource,\n        getArticles, \n        getArticleEveryNSeconds, \n        getSources, \n        getNextPageSources,\n        subscribe,\n        unsubscribe\n    }\n\n})();"]}